import React from "react";
import { StaticRouter, Redirect } from "react-router-dom";
import { pathToRegexp } from "path-to-regexp";
import { StaticRouterContext, StaticRouterProps } from "react-router";
<%_ if (useStore) { _%>
import { init, RematchStore } from "@rematch/core";
import { Provider } from "react-redux";
<%_ } _%>
import { DefaultNotFound } from "./defaultNotfound";
import { warn } from "./log";
import { flattenRoutes } from "./util";
import { BasicRouterItem, MatchedRouterItem } from "./definitions";

import entry from "../";
import staticRoute from "./staticRoutes";
import originRoutes from "./originRoutes";

const Root = entry.wrapper || ((props) => <>{props.rendered}</>);

const _routes = flattenRoutes(staticRoute);

function useMatchedRouteList(pathname: string, routeList: Array<BasicRouterItem>): Array<MatchedRouterItem> {
  let pathSnippets = pathname.split("/").filter((p) => !!p);

  if (pathname !== "/") {
    pathSnippets = pathname.split("/").filter((i) => i);
  }

  const matchedRouteList: Array<MatchedRouterItem> = [];

  pathSnippets.forEach((_, index) => {
    const url = `/${pathSnippets.slice(0, index + 1).join("/")}`;

    const targetRoute = routeList.find((route) => {
      return pathToRegexp(route.path, [], { strict: false }).test(url);
    });

    if (targetRoute) {
      matchedRouteList.push({
        name: targetRoute.name,
        path: targetRoute.path,
        active: pathname === url,
        component: targetRoute.component,
        strict: targetRoute.strict,
        redirect: targetRoute.redirect,
        icon: targetRoute.icon,
        meta: targetRoute.meta,
      });
    }
  });

  return matchedRouteList;
}

async function serverRender(
  context: { path: string; initProps: {}; initState: {} },
  staticRouterContext: StaticRouterContext,
  <%_ if (useStore) { _%>
  store: RematchStore | null,
  <%_ } else { _%>
  store: null,
  <%_ } _%>
) {
  const staticRouterProps: StaticRouterProps = {
    location: context.path,
    basename: entry.route.basename,
  };

  let App = <StaticRouter {...staticRouterProps} context={staticRouterContext} />;

  if (["/favicon.ico", "/sockjs-node/info"].includes(context.path)) {
    // do nothing
  } else {
    const matchedRouteList = useMatchedRouteList(context.path, _routes);
    const activityRoute = matchedRouteList[matchedRouteList.length - 1];

    if (!activityRoute) {
      warn(`Not found activity route item; path: ${context.path}`);

      App = (
        <StaticRouter {...staticRouterProps} context={staticRouterContext}>
          <Root matchedRouteList={matchedRouteList} rendered={<DefaultNotFound />} originRouteList={originRoutes} />
        </StaticRouter>
      );
    } else {
      const ActivityComponent = activityRoute.component;

      if (!ActivityComponent) {
        const redirectPath = activityRoute.redirect || "/";
        warn(`Not config route component; path: ${context.path}, redirect: ${redirectPath}`);

        staticRouterContext.statusCode = 302;

        App = (
          <StaticRouter {...staticRouterProps} context={staticRouterContext}>
            <Root matchedRouteList={matchedRouteList} rendered={<Redirect from={context.path} to={redirectPath} />} originRouteList={originRoutes} />
          </StaticRouter>
        );
      } else {
        let initProps = {};
        if (typeof ActivityComponent.getInitialProps === "function") {
          // @ts-ignore
          initProps = await ActivityComponent.getInitialProps({ path: context.path, store });
        }

        context.initProps = initProps;
        <%_ if (useStore) { _%>
        context.initState = store?.getState() || {};
        <%_ } _%>

        App = (
          <StaticRouter {...staticRouterProps} context={staticRouterContext}>
            <Root matchedRouteList={matchedRouteList} rendered={<ActivityComponent {...initProps} />} originRouteList={originRoutes} />
          </StaticRouter>
        );
      }
    }
  }
  <%_ if (useStore) { _%>
  if (entry.models && store) {
    return <Provider store={store}>{App}</Provider>;
  }
  <%_ } _%>

  return App;
}

<%_ if (useStore) { _%>
export function createStore(initState: any) {
  if (entry.models) {
    return init({
      models: entry.models,
      redux: {
        initialState: initState,
      },
    });
  }

  return null;
}
<%_ } _%>
export default serverRender;
